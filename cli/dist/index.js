#! /usr/bin/env node
import J from"inquirer";import D from"gradient-string";import g from"path";import{fileURLToPath as _}from"url";var k=_(import.meta.url),A=g.dirname(k),u=g.join(A,"../"),y=`
\u2591\u2588\u2580\u2584\u2591\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2591\u2588\u2580\u2580\u2584\u2591\u2580\u2588\u2580\u2591\u2588\u2580\u2580\u2591\u2591\u2591\u2591\u2580\u2588\u2580\u2591\u2588\u2580\u2580\u2584\u2591\u2588\u2591\u2592\u2588\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2580\u2580\u2584\u2591\u2584\u2580\u2580\u2584\u2591\u2584\u2580\u2580\u2584
\u2591\u2588\u2591\u2591\u2591\u2588\u2584\u2584\u2580\u2591\u2588\u2580\u2580\u2591\u2588\u2584\u2584\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2580\u2591\u2591\u2588\u2591\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2591\u2592\u2588\u2591\u2584\u2580\u2584\u2591\u2580\u2580\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588
\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2580\u2580\u2591\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591
`;var w=()=>{let t=process.env.npm_config_user_agent;return t?t.startsWith("yarn")?"yarn":t.startsWith("pnpm")?"pnpm":"npm":"npm"},S=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,h=t=>{let e=t.split("/"),r=e.findIndex(o=>o.startsWith("@")),s=e[e.length-1];return e.findIndex(o=>o.startsWith("@"))!==-1&&(s=e.slice(r).join("/")),t==="."||S.test(s??"")?!0:"App name must consist of only lowercase alphanumeric characters, '-', and '_'"},v=()=>{console.log(D(["#FF006B","#0085FF"]).multiline(y))};import j from"ora";import i from"path";import x from"inquirer";import n from"fs-extra";import a from"chalk";import{execa as O}from"execa";var b=async t=>{let e=j("Setting up your project...").start(),r=i.resolve(process.cwd(),t),s=i.join(u,"template");if(n.existsSync(r))if(n.readdirSync(r).length===0)t!=="."&&e.info(`${a.cyan.bold(t)} exists but is empty, continuing...
`);else{e.stopAndPersist();let{overwriteDir:l}=await x.prompt({name:"overwriteDir",type:"list",message:`${a.redBright.bold("Warning:")} ${a.cyan.bold(t)} already exists and isn't empty. How would you like to proceed?`,choices:[{name:"Abort installation (recommended)",value:"abort",short:"Abort"},{name:"Clear the directory and continue installation",value:"clear",short:"Clear"},{name:"Continue installation and overwrite conflicting files",value:"overwrite",short:"Overwrite"}],default:"abort"});l==="abort"&&(e.fail("Aborting installation..."),process.exit(1));let P=l==="clear"?"clear the directory":"overwrite conflicting files",{confirmOverwriteDir:T}=await x.prompt({name:"confirmOverwriteDir",type:"confirm",message:`Are you sure you want to ${P}?`,default:!1});T||(e.fail("Aborting installation..."),process.exit(1)),l==="clear"&&(e.info(`Emptying ${a.cyan.bold(t)} and creating t3 app..
`),n.emptyDirSync(r))}e.start(),n.copySync(s,r),e.text="Installing dependencies...";let o=w();await O(o,o==="yarn"?[]:["install"],{cwd:r});let c=t==="."?i.basename(process.cwd()):t,p=i.join(r,"package.json"),m=n.readJsonSync(p);m.name=c,n.writeJsonSync(p,m,{spaces:2});let f=i.join(r,"src-tauri/tauri.conf.json"),d=n.readJsonSync(f);d.package.productName=c,n.writeJsonSync(f,d,{spaces:2}),e.succeed(`${a.cyan.bold(c)} ${a.green("scaffolded successfully!")}
`)};var $=async()=>{v();let{projectName:t}=await J.prompt({message:"How is your project called?",name:"projectName",transformer:e=>e.trim(),validate:h});console.log(),await b(t)};await $();
//# sourceMappingURL=index.js.map