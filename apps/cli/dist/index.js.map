{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/const.ts","../src/installer.ts"],"sourcesContent":["#! /usr/bin/env node\n\nimport inquirer from \"inquirer\";\nimport { displayTitle, validateAppName } from \"./utils.js\";\nimport { installProject } from \"./installer.js\";\n\nconst main = async () => {\n  displayTitle();\n\n  const { projectName } = await inquirer.prompt<{ projectName: string }>({\n    message: \"How is your project called?\",\n    name: \"projectName\",\n    transformer: (input: string) => input.trim(),\n    validate: validateAppName,\n  });\n\n  console.log();\n\n  await installProject(projectName);\n};\n\nawait main();\n","import gradientString from \"gradient-string\";\nimport { TITLE_TEXT } from \"./const.js\";\n\nexport type PackageManager = \"npm\" | \"pnpm\" | \"yarn\";\n\nexport const getCurrentPackageManager: () => PackageManager = () => {\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent) {\n    if (userAgent.startsWith(\"yarn\")) {\n      return \"yarn\";\n    } else if (userAgent.startsWith(\"pnpm\")) {\n      return \"pnpm\";\n    } else {\n      return \"npm\";\n    }\n  } else {\n    return \"npm\";\n  }\n};\n\nconst validationRegExp =\n  /^(?:@[a-z0-9-*~][a-z0-9-*._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$/;\n\nexport const validateAppName = (input: string) => {\n  const paths = input.split(\"/\");\n\n  const indexOfDelimiter = paths.findIndex((p) => p.startsWith(\"@\"));\n\n  let appName = paths[paths.length - 1];\n  if (paths.findIndex((p) => p.startsWith(\"@\")) !== -1) {\n    appName = paths.slice(indexOfDelimiter).join(\"/\");\n  }\n\n  if (input === \".\" || validationRegExp.test(appName ?? \"\")) {\n    return true;\n  } else {\n    return \"App name must consist of only lowercase alphanumeric characters, '-', and '_'\";\n  }\n};\n\nexport const displayTitle = () => {\n  console.log(gradientString([\"#FF006B\", \"#0085FF\"]).multiline(TITLE_TEXT));\n};\n","import path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst distPath = path.dirname(__filename);\nexport const PKG_ROOT = path.join(distPath, \"../\");\n\nexport const TITLE_TEXT = `\n░█▀▄░█▀▀▄░█▀▀░█▀▀▄░▀█▀░█▀▀░░░░▀█▀░█▀▀▄░█░▒█░█░█░░░░█▀▀▄░▄▀▀▄░▄▀▀▄\n░█░░░█▄▄▀░█▀▀░█▄▄█░░█░░█▀▀░▀▀░░█░░█▄▄█░█░▒█░▄▀▄░▀▀░█▄▄█░█▄▄█░█▄▄█\n░▀▀▀░▀░▀▀░▀▀▀░▀░░▀░░▀░░▀▀▀░░░░░▀░░▀░░▀░░▀▀▀░▀░▀░░░░▀░░▀░█░░░░█░░░\n`;\n","import ora from \"ora\";\nimport path from \"path\";\nimport { PKG_ROOT } from \"./const.js\";\nimport inquirer from \"inquirer\";\nimport fs from \"fs-extra\";\nimport chalk from \"chalk\";\nimport { execa } from \"execa\";\nimport { getCurrentPackageManager } from \"./utils.js\";\n\nexport const installProject = async (projectName: string) => {\n  const spinner = ora(\"Setting up your project...\").start();\n\n  const projectDir = path.resolve(process.cwd(), projectName);\n  const srcDir = path.join(PKG_ROOT, \"template\");\n\n  if (fs.existsSync(projectDir)) {\n    if (fs.readdirSync(projectDir).length === 0) {\n      if (projectName !== \".\")\n        spinner.info(\n          `${chalk.cyan.bold(projectName)} exists but is empty, continuing...\\n`\n        );\n    } else {\n      spinner.stopAndPersist();\n      const { overwriteDir } = await inquirer.prompt<{\n        overwriteDir: \"abort\" | \"clear\" | \"overwrite\";\n      }>({\n        name: \"overwriteDir\",\n        type: \"list\",\n        message: `${chalk.redBright.bold(\"Warning:\")} ${chalk.cyan.bold(\n          projectName\n        )} already exists and isn't empty. How would you like to proceed?`,\n        choices: [\n          {\n            name: \"Abort installation (recommended)\",\n            value: \"abort\",\n            short: \"Abort\",\n          },\n          {\n            name: \"Clear the directory and continue installation\",\n            value: \"clear\",\n            short: \"Clear\",\n          },\n          {\n            name: \"Continue installation and overwrite conflicting files\",\n            value: \"overwrite\",\n            short: \"Overwrite\",\n          },\n        ],\n        default: \"abort\",\n      });\n      if (overwriteDir === \"abort\") {\n        spinner.fail(\"Aborting installation...\");\n        process.exit(1);\n      }\n\n      const overwriteAction =\n        overwriteDir === \"clear\"\n          ? \"clear the directory\"\n          : \"overwrite conflicting files\";\n\n      const { confirmOverwriteDir } = await inquirer.prompt<{\n        confirmOverwriteDir: boolean;\n      }>({\n        name: \"confirmOverwriteDir\",\n        type: \"confirm\",\n        message: `Are you sure you want to ${overwriteAction}?`,\n        default: false,\n      });\n\n      if (!confirmOverwriteDir) {\n        spinner.fail(\"Aborting installation...\");\n        process.exit(1);\n      }\n\n      if (overwriteDir === \"clear\") {\n        spinner.info(\n          `Emptying ${chalk.cyan.bold(projectName)} and creating t3 app..\\n`\n        );\n        fs.emptyDirSync(projectDir);\n      }\n    }\n  }\n\n  spinner.start();\n\n  fs.copySync(srcDir, projectDir);\n\n  spinner.text = \"Installing dependencies...\";\n  const packageManager = getCurrentPackageManager();\n  await execa(packageManager, packageManager === \"yarn\" ? [] : [\"install\"], {\n    cwd: projectDir,\n  });\n\n  const scaffoldedName =\n    projectName === \".\" ? path.basename(process.cwd()) : projectName;\n\n  const packageJsonPath = path.join(projectDir, \"package.json\");\n  const packageJson = fs.readJsonSync(packageJsonPath);\n  packageJson.name = scaffoldedName;\n  fs.writeJsonSync(packageJsonPath, packageJson, { spaces: 2 });\n\n  const tauriJsonPath = path.join(projectDir, \"src-tauri/tauri.conf.json\");\n  const tauriJson = fs.readJsonSync(tauriJsonPath);\n  tauriJson.package.productName = scaffoldedName;\n  fs.writeJsonSync(tauriJsonPath, tauriJson, { spaces: 2 });\n\n  spinner.succeed(\n    `${chalk.cyan.bold(scaffoldedName)} ${chalk.green(\n      \"scaffolded successfully!\"\n    )}\\n`\n  );\n};\n"],"mappings":"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","names":["inquirer","gradientString","path","fileURLToPath","__filename","distPath","PKG_ROOT","TITLE_TEXT","getCurrentPackageManager","userAgent","validationRegExp","validateAppName","input","paths","indexOfDelimiter","p","appName","displayTitle","gradientString","TITLE_TEXT","ora","path","inquirer","fs","chalk","execa","installProject","projectName","spinner","ora","projectDir","path","srcDir","PKG_ROOT","fs","chalk","overwriteDir","inquirer","overwriteAction","confirmOverwriteDir","packageManager","getCurrentPackageManager","execa","scaffoldedName","packageJsonPath","packageJson","tauriJsonPath","tauriJson","main","displayTitle","projectName","inquirer","input","validateAppName","installProject"]}