#! /usr/bin/env node
import O from"inquirer";import A from"gradient-string";import c from"path";import{fileURLToPath as x}from"url";var b=x(import.meta.url),T=c.dirname(b),l=c.join(T,"../"),p=`
\u2591\u2588\u2580\u2584\u2591\u2588\u2580\u2580\u2584\u2591\u2588\u2580\u2580\u2591\u2588\u2580\u2580\u2584\u2591\u2580\u2588\u2580\u2591\u2588\u2580\u2580\u2591\u2591\u2591\u2591\u2580\u2588\u2580\u2591\u2588\u2580\u2580\u2584\u2591\u2588\u2591\u2592\u2588\u2591\u2588\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2580\u2580\u2584\u2591\u2584\u2580\u2580\u2584\u2591\u2584\u2580\u2580\u2584
\u2591\u2588\u2591\u2591\u2591\u2588\u2584\u2584\u2580\u2591\u2588\u2580\u2580\u2591\u2588\u2584\u2584\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2580\u2580\u2591\u2580\u2580\u2591\u2591\u2588\u2591\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2591\u2592\u2588\u2591\u2584\u2580\u2584\u2591\u2580\u2580\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588\u2591\u2588\u2584\u2584\u2588
\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2580\u2580\u2591\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2588\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591
`;var m=()=>{let t=process.env.npm_config_user_agent;return t?t.startsWith("yarn")?"yarn":t.startsWith("pnpm")?"pnpm":"npm":"npm"},_=/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/,f=t=>{let e=t.split("/"),r=e.findIndex(n=>n.startsWith("@")),o=e[e.length-1];return e.findIndex(n=>n.startsWith("@"))!==-1&&(o=e.slice(r).join("/")),t==="."||_.test(o??"")?!0:"App name must consist of only lowercase alphanumeric characters, '-', and '_'"},d=()=>{console.log(A(["#FF006B","#0085FF"]).multiline(p))};import P from"ora";import g from"path";import u from"inquirer";import a from"fs-extra";import i from"chalk";import{execa as D}from"execa";var y=async t=>{let e=P("Setting up your project...").start(),r=g.resolve(process.cwd(),t),o=g.join(l,"template");if(a.existsSync(r))if(a.readdirSync(r).length===0)t!=="."&&e.info(`${i.cyan.bold(t)} exists but is empty, continuing...
`);else{e.stopAndPersist();let{overwriteDir:s}=await u.prompt({name:"overwriteDir",type:"list",message:`${i.redBright.bold("Warning:")} ${i.cyan.bold(t)} already exists and isn't empty. How would you like to proceed?`,choices:[{name:"Abort installation (recommended)",value:"abort",short:"Abort"},{name:"Clear the directory and continue installation",value:"clear",short:"Clear"},{name:"Continue installation and overwrite conflicting files",value:"overwrite",short:"Overwrite"}],default:"abort"});s==="abort"&&(e.fail("Aborting installation..."),process.exit(1));let v=s==="clear"?"clear the directory":"overwrite conflicting files",{confirmOverwriteDir:h}=await u.prompt({name:"confirmOverwriteDir",type:"confirm",message:`Are you sure you want to ${v}?`,default:!1});h||(e.fail("Aborting installation..."),process.exit(1)),s==="clear"&&(e.info(`Emptying ${i.cyan.bold(t)} and creating t3 app..
`),a.emptyDirSync(r))}e.start(),a.copySync(o,r),e.text="Installing dependencies...";let n=m();await D(n,n==="yarn"?[]:["install"],{cwd:r});let w=t==="."?"App":i.cyan.bold(t);e.succeed(`${w} ${i.green("scaffolded successfully!")}
`)};var $=async()=>{d();let{projectName:t}=await O.prompt({message:"How is your project called?",name:"projectName",transformer:e=>e.trim(),validate:f});console.log(),await y(t)};await $();
//# sourceMappingURL=index.js.map